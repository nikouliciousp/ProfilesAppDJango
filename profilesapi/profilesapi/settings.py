"""
Django settings for profilesapi project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ge=cymvs_&6^288r714y#$jgm13q=!atee#v-exsr4spocgn&@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Hosts/domains that are valid for this site
ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    # Built-in apps
    'django.contrib.admin',  # Admin site
    'django.contrib.auth',  # Authentication framework
    'django.contrib.contenttypes',  # Content types framework
    'django.contrib.sessions',  # Session framework
    'django.contrib.messages',  # Messaging framework
    'django.contrib.staticfiles',  # Static files handling

    # Third-party apps
    'rest_framework',  # Django REST framework
    'rest_framework.authtoken',  # REST framework token authentication
    'dj_rest_auth',  # For REST authentication

    # Custom apps
    'profilesapi',  # Custom app for profilesAPI
    'profiles',  # Add this line to register the profiles app

    # Allauth configuration
    'django.contrib.sites',  # Required by django-allauth
    'allauth',  # Core package for django-allauth
    'allauth.account',  # Required for account management
    'allauth.socialaccount',  # For social account logins if needed
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Security middleware
    'django.contrib.sessions.middleware.SessionMiddleware',  # Session handling
    'django.middleware.common.CommonMiddleware',  # Common middleware functionalities
    'allauth.account.middleware.AccountMiddleware',  # Allauth Account middleware (NEW)
    'django.middleware.csrf.CsrfViewMiddleware',  # CSRF protection
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Authentication middleware
    'django.contrib.messages.middleware.MessageMiddleware',  # Message framework middleware
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Clickjacking protection
]

# URL configuration module
ROOT_URLCONF = 'profilesapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # Directories for templates
        'APP_DIRS': True,  # Look for templates in app directories
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',  # Debug context processor
                'django.template.context_processors.request',  # Request context processor
                'django.contrib.auth.context_processors.auth',  # Auth context processor
                'django.contrib.messages.context_processors.messages',  # Messages context processor
            ],
        },
    },
]

# WSGI application entry point
WSGI_APPLICATION = 'profilesapi.wsgi.application'

# Database configuration
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # SQLite database engine
        'NAME': BASE_DIR / 'db.sqlite3',  # Database file path
    }
}

# Password validation settings
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # Validates similarity to user attributes
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # Ensures minimum password length
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # Prevents common passwords
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        # Disallows passwords that are entirely numeric
    },
]

# Internationalization settings
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-us'  # Default language code
TIME_ZONE = 'UTC'  # Default time zone
USE_I18N = True  # Enable internationalization
USE_TZ = True  # Enable time zone support

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = 'static/'  # URL prefix for static files

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'  # Default primary key field type

# Media files configuration
MEDIA_URL = '/media/'  # URL prefix for media files
MEDIA_ROOT = 'uploads'  # Root directory for uploaded media files

# REST framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',  # Session-based authentication
        'rest_framework.authentication.TokenAuthentication',  # Token-based authentication
    ]
}

SITE_ID = 1
ACCOUNT_EMAIL_REQUIRED = True  # Ensure email is required for registration
ACCOUNT_USERNAME_REQUIRED = True  # Ensure username is required
ACCOUNT_AUTHENTICATION_METHOD = 'username'  # or 'email' or 'username_email'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # Use console backend for sending emails in development
ACCOUNT_EMAIL_VERIFICATION = "optional"  # Disable mandatory email verification for now

LOGOUT_REDIRECT_URL = '/api/rest-auth/login/'  # URL to redirect user after logout

APPEND_SLASH = True